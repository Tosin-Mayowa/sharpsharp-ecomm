import { Flex, Box, Center, CircularProgress, Text, useToast } from "@chakra-ui/react";
import type { NextPage } from "next";
import Head from "next/head";
import { Electronics } from "../Component/ProductPage/Electronics";
import Home1 from "../public/Images/Home1.jpg";
import Image from "next/image";
import ReactTypingEffect from "react-typing-effect";
import { ClassNames } from "@emotion/react";
import styles from "../styles/Home.module.css";
import { Kitchen } from "../Component/ProductPage/Kitchen";

import { useCallback, useEffect, useState } from "react";
import { getElectProduct, getGroceProduct, getKitProduct, getMobileProduct, getWears } from "../requestApi";
import { Grocery } from "../Component/ProductPage/Grocery";
import { Mobile } from "../Component/ProductPage/Mobile/Mobile";
import { Wears } from "../Component/ProductPage/Wears";
import { IE } from "../Types/productTypes";
const Home: NextPage = () => {
  const [pageMount,setPageMount]=useState<boolean>(true);
console.log('pageMount',pageMount);
const toast=useToast();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [electData, setElectData] = useState<IE[]>([]);
  const [wearsData, setWearsData] = useState<Array<string>>([]);
  const [kitchenData, setKitchenData] = useState<Array<string>>([]);
  const [groceriesData, setGroceriesData] = useState<Array<string>>([]);
  const [mobileData, setMobileData] = useState<Array<string>>([]);
console.log('wearsData',wearsData);

  

  const fetchWearsProducts = async () => {
    setIsLoading(true);
    const response = await getWears();
    setIsLoading(false);
    setWearsData(response?.data?.data);
   
  };

useEffect(()=>{
  fetchWearsProducts();
},[]);
  
  
  const fetchMobileProducts = async () => {
    setIsLoading(true);
    const response = await getMobileProduct();
    setIsLoading(false);
    setMobileData(response?.data?.data);
   
  };

useEffect(()=>{
  fetchMobileProducts();
},[]);
  
  const fetchGroceProducts = async () => {
    setIsLoading(true);
    const response = await getGroceProduct();
    setIsLoading(false);
    setGroceriesData(response?.data?.data);
   
  };

useEffect(()=>{
  fetchGroceProducts()
},[]);
  
  
  const fetchKitProducts = async () => {
    setIsLoading(true);
    const response = await getKitProduct();
    setIsLoading(false);
    setKitchenData(response?.data?.data);
    toast({
      description:response?.data?.message ,
     status: 'success',
      duration: 2000,
     position: 'top',
   });
  };

useEffect(()=>{
  fetchKitProducts()
},[]);


const fetchElectroProducts = async () => {
  setIsLoading(true);
  
  const response = await getElectProduct();

  setIsLoading(false);
  setElectData(response?.data?.data);
  toast({
    description:response?.data?.message ,
   status: 'success',
    duration: 2000,
   position: 'top',
 });
};

useEffect(()=>{
  fetchElectroProducts();
},[]);




  return (
    <Flex
      as={Box}
      width="100%"
      height="100%"
      bg="#fff"
      justifyContent="center"
      flexDirection="column"
      background="#fff9fb"
    >
      <Head>
        <title>Sharpsharp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>



      <Center>
        <Flex flexDir="column">
          <Center>
            <Box
              fontSize="20px"
              fontWeight="500"
              width="50%"
              backgroundColor="#20A39E"
              color="white"
              height="30px"
              padding="7px"
              mt={["50px", "80px", "100px"]}
            >
              <ReactTypingEffect
                className={styles.Typed}
                text={[
                  "All our Products are on payment on delivery plan",
                  "We will not ask you to pay online",
                  "We will not call to ask for your bank details",
                  "Please Do not give your bank details to anyone",
                  "Do not Pay Online",
                  "Pay On Delivery",
                ]}
              />
            </Box>
          </Center>
          <Box mt="10px">
            <Image
              src={Home1}
              alt="home page image"
              width={1200}
              height={700}
            />
          </Box>

      { !wearsData?.length?<Flex
          h="100%"
          bg='#f1f1f1'
          zIndex="6"
          alignItems="center"
          justifyContent="center"
          flexDirection="column"
          textAlign="center"
        >
          <CircularProgress color="#20A39E" isIndeterminate size="164px" thickness="6px" mb="32px" />
          <Box>
            <Text color="#4E5D78" fontSize="22px" lineHeight="27px" fontWeight="600" mb="14px">
              Loading Products
            </Text>
            <Text fontSize="18px" lineHeight="16px">
              It will only take a minute
            </Text>
          </Box>
        </Flex>:<Center>
            <Flex flexDir="column">
              <Wears wearsData={wearsData}/>
              <Electronics electData={electData} />
              <Kitchen kitchenData={kitchenData}/>
           <Grocery groceriesData={groceriesData}/>
           <Mobile mobileData={mobileData}/>
            </Flex>
          </Center>}
        </Flex>
      </Center>
    </Flex>
  );
};

export default Home;
